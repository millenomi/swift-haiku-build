From 46b683f78380f326bafbe202e9076d45d4f2905f Mon Sep 17 00:00:00 2001
From: Calvin Hill <calvin@hakobaito.co.uk>
Date: Fri, 18 Aug 2017 04:03:14 +0100
Subject: [PATCH] Add Initial Haiku support for Swift 4

---
 CMakeLists.txt                                     | 16 +++++-
 cmake/modules/AddSwift.cmake                       | 12 +++-
 cmake/modules/FindICU.cmake                        |  2 +-
 include/swift/Basic/LangOptions.h                  |  3 +-
 include/swift/Runtime/Concurrent.h                 |  2 +-
 include/swift/Runtime/Mutex.h                      |  2 +-
 include/swift/Runtime/MutexPThread.h               |  2 +-
 lib/Basic/LangOptions.cpp                          |  3 +
 lib/Basic/Platform.cpp                             |  3 +-
 lib/Basic/Statistic.cpp                            |  4 ++
 lib/Basic/TaskQueue.cpp                            |  2 +-
 lib/Driver/Driver.cpp                              |  3 +
 lib/Driver/ToolChains.cpp                          |  8 ++-
 stdlib/private/StdlibUnittest/CMakeLists.txt       |  1 +
 stdlib/private/StdlibUnittest/RaceTest.swift       |  2 +-
 .../private/StdlibUnittest/StdlibCoreExtras.swift  |  2 +-
 .../StdlibUnittest/StdlibUnittest.swift.gyb        | 28 +++++++++-
 .../private/SwiftPrivateLibcExtras/CMakeLists.txt  |  1 +
 stdlib/private/SwiftPrivateLibcExtras/Subprocess.c |  4 +-
 .../SwiftPrivateLibcExtras/Subprocess.swift        | 19 +++++--
 .../SwiftPrivateLibcExtras.swift                   |  6 +-
 .../SwiftPrivatePthreadExtras/CMakeLists.txt       |  1 +
 .../PthreadBarriers.swift                          |  6 +-
 .../SwiftPrivatePthreadExtras.swift                |  4 +-
 stdlib/public/Platform/CMakeLists.txt              | 27 ++++++---
 stdlib/public/Platform/POSIXError.swift            |  2 +-
 stdlib/public/Platform/Platform.swift              |  4 +-
 stdlib/public/Platform/TiocConstants.swift         |  2 +-
 stdlib/public/Platform/glibc.modulemap.gyb         | 64 ++++++++++++++++++++--
 stdlib/public/Platform/tgmath.swift.gyb            |  4 +-
 stdlib/public/SwiftShims/LibcShims.h               |  2 +
 stdlib/public/runtime/Errors.cpp                   |  2 +-
 stdlib/public/runtime/ImageInspectionELF.cpp       | 51 ++++++++++++++++-
 stdlib/public/runtime/MetadataCache.h              |  7 ++-
 stdlib/public/stubs/LibcShims.cpp                  |  5 +-
 stdlib/public/stubs/Stubs.cpp                      | 16 ++++--
 test/CMakeLists.txt                                |  3 +-
 utils/build-script-impl                            | 39 +++++++++++++
 .../swift_build_support/targets.py                 |  9 ++-
 .../swift_build_support/toolchain.py               |  5 ++
 40 files changed, 318 insertions(+), 60 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c0306ccb76..5f6a6d58cc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -170,10 +170,10 @@ set(SWIFT_ANDROID_DEPLOY_DEVICE_PATH "" CACHE STRING
   "Path on an Android device where build products will be pushed. These are used when running the test suite against the device")
 
 #
-# User-configurable ICU specific options for Android, FreeBSD, Linux.
+# User-configurable ICU specific options for Android, FreeBSD, Linux and Haiku.
 #
 
-foreach(sdk ANDROID;FREEBSD;LINUX;WINDOWS)
+foreach(sdk ANDROID;FREEBSD;LINUX;WINDOWS;HAIKU)
   set(SWIFT_${sdk}_ICU_UC "" CACHE STRING
       "Path to a directory containing the icuuc library for ${sdk}")
   set(SWIFT_${sdk}_ICU_UC_INCLUDE "" CACHE STRING
@@ -536,6 +536,8 @@ else()
     set(SWIFT_HOST_VARIANT_SDK_default "CYGWIN")
   elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
     set(SWIFT_HOST_VARIANT_SDK_default "WINDOWS")
+  elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Haiku")
+	set(SWIFT_HOST_VARIANT_SDK_default "HAIKU")
   elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
     set(SWIFT_HOST_VARIANT_SDK_default "OSX")
   else()
@@ -677,6 +679,16 @@ elseif("${SWIFT_HOST_VARIANT_SDK}" STREQUAL "WINDOWS")
   set(SWIFT_PRIMARY_VARIANT_SDK_default  "${SWIFT_HOST_VARIANT_SDK}")
   set(SWIFT_PRIMARY_VARIANT_ARCH_default "${SWIFT_HOST_VARIANT_ARCH}")
 
+elseif("${SWIFT_HOST_VARIANT_SDK}" STREQUAL "HAIKU")
+
+  set(CMAKE_EXECUTABLE_FORMAT "ELF")
+  set(SWIFT_HOST_VARIANT "haiku" CACHE STRING
+      "Deployment OS for Swift host tools (the compiler) [haiku].")
+
+  configure_sdk_unix(HAIKU "Haiku" "haiku" "haiku" "x86_64" "x86_64-unknown-haiku" "/")
+  set(SWIFT_PRIMARY_VARIANT_SDK_default  "${SWIFT_HOST_VARIANT_SDK}")
+  set(SWIFT_PRIMARY_VARIANT_ARCH_default "x86_64")
+
 elseif("${SWIFT_HOST_VARIANT_SDK}" MATCHES "(OSX|IOS*|TVOS*|WATCHOS*)")
 
   set(SWIFT_HOST_VARIANT "macosx" CACHE STRING
diff --git a/cmake/modules/AddSwift.cmake b/cmake/modules/AddSwift.cmake
index 9cceaff64f..a5d34d2f97 100644
--- a/cmake/modules/AddSwift.cmake
+++ b/cmake/modules/AddSwift.cmake
@@ -353,6 +353,8 @@ function(_add_variant_link_flags)
       # options. This causes conflicts.
       list(APPEND result "-nostdlib")
     endif()
+   elseif("${LFLAGS_SDK}" STREQUAL "HAIKU")
+   list(APPEND result "-lbsd" "-latomic" "-Wl,-Bsymbolic")
   elseif("${LFLAGS_SDK}" STREQUAL "ANDROID")
     list(APPEND result
         "-ldl" "-llog" "-latomic" "-licudata" "-licui18n" "-licuuc"
@@ -1262,6 +1264,9 @@ endfunction()
 # SWIFT_MODULE_DEPENDS_CYGWIN
 #   Swift modules this library depends on when built for Cygwin.
 #
+# SWIFT_MODULE_DEPENDS_HAIKU
+#   Swift modules this library depends on when built for Haiku.
+#
 # FRAMEWORK_DEPENDS
 #   System frameworks this library depends on.
 #
@@ -1335,7 +1340,7 @@ function(add_swift_library name)
   cmake_parse_arguments(SWIFTLIB
     "${SWIFTLIB_options}"
     "INSTALL_IN_COMPONENT;DEPLOYMENT_VERSION_OSX;DEPLOYMENT_VERSION_IOS;DEPLOYMENT_VERSION_TVOS;DEPLOYMENT_VERSION_WATCHOS"
-    "DEPENDS;LINK_LIBRARIES;SWIFT_MODULE_DEPENDS;SWIFT_MODULE_DEPENDS_OSX;SWIFT_MODULE_DEPENDS_IOS;SWIFT_MODULE_DEPENDS_TVOS;SWIFT_MODULE_DEPENDS_WATCHOS;SWIFT_MODULE_DEPENDS_FREEBSD;SWIFT_MODULE_DEPENDS_LINUX;SWIFT_MODULE_DEPENDS_CYGWIN;FRAMEWORK_DEPENDS;FRAMEWORK_DEPENDS_WEAK;FRAMEWORK_DEPENDS_OSX;FRAMEWORK_DEPENDS_IOS_TVOS;LLVM_COMPONENT_DEPENDS;FILE_DEPENDS;TARGET_SDKS;C_COMPILE_FLAGS;SWIFT_COMPILE_FLAGS;SWIFT_COMPILE_FLAGS_OSX;SWIFT_COMPILE_FLAGS_IOS;SWIFT_COMPILE_FLAGS_TVOS;SWIFT_COMPILE_FLAGS_WATCHOS;LINK_FLAGS;PRIVATE_LINK_LIBRARIES;INTERFACE_LINK_LIBRARIES;INCORPORATE_OBJECT_LIBRARIES;INCORPORATE_OBJECT_LIBRARIES_SHARED_ONLY"
+    "DEPENDS;LINK_LIBRARIES;SWIFT_MODULE_DEPENDS;SWIFT_MODULE_DEPENDS_OSX;SWIFT_MODULE_DEPENDS_IOS;SWIFT_MODULE_DEPENDS_TVOS;SWIFT_MODULE_DEPENDS_WATCHOS;SWIFT_MODULE_DEPENDS_FREEBSD;SWIFT_MODULE_DEPENDS_LINUX;SWIFT_MODULE_DEPENDS_CYGWIN;SWIFT_MODULE_DEPENDS_HAIKU;FRAMEWORK_DEPENDS;FRAMEWORK_DEPENDS_WEAK;FRAMEWORK_DEPENDS_OSX;FRAMEWORK_DEPENDS_IOS_TVOS;LLVM_COMPONENT_DEPENDS;FILE_DEPENDS;TARGET_SDKS;C_COMPILE_FLAGS;SWIFT_COMPILE_FLAGS;SWIFT_COMPILE_FLAGS_OSX;SWIFT_COMPILE_FLAGS_IOS;SWIFT_COMPILE_FLAGS_TVOS;SWIFT_COMPILE_FLAGS_WATCHOS;LINK_FLAGS;PRIVATE_LINK_LIBRARIES;INTERFACE_LINK_LIBRARIES;INCORPORATE_OBJECT_LIBRARIES;INCORPORATE_OBJECT_LIBRARIES_SHARED_ONLY"
     ${ARGN})
   set(SWIFTLIB_SOURCES ${SWIFTLIB_UNPARSED_ARGUMENTS})
 
@@ -1366,7 +1371,7 @@ function(add_swift_library name)
   if("${SWIFTLIB_TARGET_SDKS}" STREQUAL "")
     set(SWIFTLIB_TARGET_SDKS ${SWIFT_SDKS})
   endif()
-  list_replace(SWIFTLIB_TARGET_SDKS ALL_POSIX_PLATFORMS "ALL_APPLE_PLATFORMS;ANDROID;CYGWIN;FREEBSD;LINUX")
+  list_replace(SWIFTLIB_TARGET_SDKS ALL_POSIX_PLATFORMS "ALL_APPLE_PLATFORMS;ANDROID;CYGWIN;FREEBSD;LINUX;HAIKU")
   list_replace(SWIFTLIB_TARGET_SDKS ALL_APPLE_PLATFORMS "${SWIFT_APPLE_PLATFORMS}")
 
   # All Swift code depends on the standard library, except for the standard
@@ -1476,6 +1481,9 @@ function(add_swift_library name)
         elseif("${sdk}" STREQUAL "CYGWIN")
           list(APPEND swiftlib_module_depends_flattened
                ${SWIFTLIB_SWIFT_MODULE_DEPENDS_CYGWIN})
+        elseif("${sdk}" STREQUAL "HAIKU")
+          list(APPEND swiftlib_module_depends_flattened
+               ${SWIFTLIB_SWIFT_MODULE_DEPENDS_HAIKU})
         endif()
 
         # Swift compiles depend on swift modules, while links depend on
diff --git a/cmake/modules/FindICU.cmake b/cmake/modules/FindICU.cmake
index b76fd8ad95..4f380c832b 100644
--- a/cmake/modules/FindICU.cmake
+++ b/cmake/modules/FindICU.cmake
@@ -31,7 +31,7 @@ foreach(MODULE ${ICU_FIND_COMPONENTS})
   endif()
 endforeach()
 
-foreach(sdk ANDROID;FREEBSD;LINUX;WINDOWS)
+foreach(sdk ANDROID;FREEBSD;LINUX;WINDOWS;HAIKU)
   foreach(MODULE ${ICU_FIND_COMPONENTS})
     string(TOUPPER "${MODULE}" MODULE)
     if("${SWIFT_${sdk}_ICU_${MODULE}_INCLUDE}" STREQUAL "")
diff --git a/include/swift/Basic/LangOptions.h b/include/swift/Basic/LangOptions.h
index 36a81bf8f7..2e3fd7066e 100644
--- a/include/swift/Basic/LangOptions.h
+++ b/include/swift/Basic/LangOptions.h
@@ -265,7 +265,8 @@ namespace swift {
         Target.getOSVersion(major, minor, revision);
       } else if (Target.isOSLinux() || Target.isOSFreeBSD() ||
                  Target.isAndroid() || Target.isOSWindows() ||
-                 Target.isPS4() || Target.getTriple().empty()) {
+                 Target.isPS4() || Target.isOSHaiku() ||
+                 Target.getTriple().empty()) {
         major = minor = revision = 0;
       } else {
         llvm_unreachable("Unsupported target OS");
diff --git a/include/swift/Runtime/Concurrent.h b/include/swift/Runtime/Concurrent.h
index adfb6853f0..23321fd9a3 100644
--- a/include/swift/Runtime/Concurrent.h
+++ b/include/swift/Runtime/Concurrent.h
@@ -17,7 +17,7 @@
 #include <stdint.h>
 #include "llvm/Support/Allocator.h"
 
-#if defined(__FreeBSD__) || defined(__CYGWIN__)
+#if defined(__FreeBSD__) || defined(__CYGWIN__) || defined(__HAIKU__)
 #include <stdio.h>
 #endif
 
diff --git a/include/swift/Runtime/Mutex.h b/include/swift/Runtime/Mutex.h
index be26eff4c6..135b0ea104 100644
--- a/include/swift/Runtime/Mutex.h
+++ b/include/swift/Runtime/Mutex.h
@@ -20,7 +20,7 @@
 
 #include <type_traits>
 
-#if (defined(__APPLE__) || defined(__linux__) || defined(__CYGWIN__) || defined(__FreeBSD__))
+#if (defined(__APPLE__) || defined(__linux__) || defined(__CYGWIN__) || defined(__FreeBSD__) || defined(__HAIKU__))
 #include "swift/Runtime/MutexPThread.h"
 #elif defined(_WIN32)
 #include "swift/Runtime/MutexWin32.h"
diff --git a/include/swift/Runtime/MutexPThread.h b/include/swift/Runtime/MutexPThread.h
index 33b3a193bb..1b06a2977b 100644
--- a/include/swift/Runtime/MutexPThread.h
+++ b/include/swift/Runtime/MutexPThread.h
@@ -26,7 +26,7 @@ typedef pthread_cond_t ConditionHandle;
 typedef pthread_mutex_t MutexHandle;
 typedef pthread_rwlock_t ReadWriteLockHandle;
 
-#if defined(__CYGWIN__) || defined(__ANDROID__)
+#if defined(__CYGWIN__) || defined(__ANDROID__) || defined(__HAIKU__)
 // At the moment CYGWIN pthreads implementation doesn't support the use of
 // constexpr for static allocation versions. The way they define things
 // results in a reinterpret_cast which violates constexpr. Similarly, Android's
diff --git a/lib/Basic/LangOptions.cpp b/lib/Basic/LangOptions.cpp
index 6906b01158..247d43e18c 100644
--- a/lib/Basic/LangOptions.cpp
+++ b/lib/Basic/LangOptions.cpp
@@ -37,6 +37,7 @@ static const StringRef SupportedConditionalCompilationOSs[] = {
   "Android",
   "PS4",
   "Cygwin",
+  "Haiku",
 };
 
 static const StringRef SupportedConditionalCompilationArches[] = {
@@ -162,6 +163,8 @@ std::pair<bool, bool> LangOptions::setTarget(llvm::Triple triple) {
     addPlatformConditionValue(PlatformConditionKind::OS, "Cygwin");
   else if (triple.isPS4())
     addPlatformConditionValue(PlatformConditionKind::OS, "PS4");
+  else if (triple.isOSHaiku())
+    addPlatformConditionValue(PlatformConditionKind::OS, "Haiku");
   else
     UnsupportedOS = true;
 
diff --git a/lib/Basic/Platform.cpp b/lib/Basic/Platform.cpp
index 4942343bbc..9f01bd40f0 100644
--- a/lib/Basic/Platform.cpp
+++ b/lib/Basic/Platform.cpp
@@ -97,7 +97,6 @@ StringRef swift::getPlatformNameForTriple(const llvm::Triple &triple) {
   case llvm::Triple::NetBSD:
   case llvm::Triple::OpenBSD:
   case llvm::Triple::Solaris:
-  case llvm::Triple::Haiku:
   case llvm::Triple::Minix:
   case llvm::Triple::RTEMS:
   case llvm::Triple::NaCl:
@@ -135,6 +134,8 @@ StringRef swift::getPlatformNameForTriple(const llvm::Triple &triple) {
     }
   case llvm::Triple::PS4:
     return "ps4";
+  case llvm::Triple::Haiku:
+    return "haiku";
   }
   llvm_unreachable("unsupported OS");
 }
diff --git a/lib/Basic/Statistic.cpp b/lib/Basic/Statistic.cpp
index 049368b217..4eab5e3899 100644
--- a/lib/Basic/Statistic.cpp
+++ b/lib/Basic/Statistic.cpp
@@ -33,10 +33,14 @@ using namespace llvm::sys;
 static size_t
 getChildrenMaxResidentSetSize() {
 #if defined(HAVE_GETRUSAGE)
+#if !defined(__HAIKU__)
   struct rusage RU;
   ::getrusage(RUSAGE_CHILDREN, &RU);
   return RU.ru_maxrss;
 #else
+return 0;
+#endif
+#else
   return 0;
 #endif
 }
diff --git a/lib/Basic/TaskQueue.cpp b/lib/Basic/TaskQueue.cpp
index be94a2e133..7f6fcf7599 100644
--- a/lib/Basic/TaskQueue.cpp
+++ b/lib/Basic/TaskQueue.cpp
@@ -23,7 +23,7 @@ using namespace swift;
 using namespace swift::sys;
 
 // Include the correct TaskQueue implementation.
-#if LLVM_ON_UNIX && !defined(__CYGWIN__)
+#if LLVM_ON_UNIX && !defined(__CYGWIN__) && !defined(__HAIKU__)
 #include "Unix/TaskQueue.inc"
 #else
 #include "Default/TaskQueue.inc"
diff --git a/lib/Driver/Driver.cpp b/lib/Driver/Driver.cpp
index a5d6e1cbce..59fad7aa9d 100644
--- a/lib/Driver/Driver.cpp
+++ b/lib/Driver/Driver.cpp
@@ -212,6 +212,9 @@ makeToolChain(Driver &driver, const llvm::Triple &target) {
   case llvm::Triple::Win32:
     return llvm::make_unique<toolchains::Cygwin>(driver, target);
     break;
+  case llvm::Triple::Haiku:
+    return llvm::make_unique<toolchains::GenericUnix>(driver, target);
+    break;
   default:
     return nullptr;
   }
diff --git a/lib/Driver/ToolChains.cpp b/lib/Driver/ToolChains.cpp
index ce7d0bbc68..9b1382c531 100644
--- a/lib/Driver/ToolChains.cpp
+++ b/lib/Driver/ToolChains.cpp
@@ -1533,7 +1533,7 @@ bool toolchains::GenericUnix::shouldProvideRPathToLinker() const {
 
 std::string toolchains::GenericUnix::getPreInputObjectPath(
     StringRef RuntimeLibraryPath) const {
-  // On Linux and FreeBSD (really, ELF binaries) we need to add objects
+  // On Linux and FreeBSD and Haiku (really, ELF binaries) we need to add objects
   // to provide markers and size for the metadata sections.
   SmallString<128> PreInputObjectPath = RuntimeLibraryPath;
   llvm::sys::path::append(PreInputObjectPath,
@@ -1578,7 +1578,13 @@ toolchains::GenericUnix::constructInvocation(const LinkJobAction &job,
     Linker = getDefaultLinker();
   }
   if (!Linker.empty()) {
+ #if defined(__HAIKU__)
+// For now, passing -use-ld on Haiku doesn't work as swiftc doesn't recognise
+// it. Passing -use-ld= as the argument works fine.
+   Arguments.push_back(context.Args.MakeArgString("-use-ld=" + Linker));
+ #else
     Arguments.push_back(context.Args.MakeArgString("-fuse-ld=" + Linker));
+#endif
   }
 
   // Configure the toolchain.
diff --git a/stdlib/private/StdlibUnittest/CMakeLists.txt b/stdlib/private/StdlibUnittest/CMakeLists.txt
index 628b3d89b3..4db41c5039 100644
--- a/stdlib/private/StdlibUnittest/CMakeLists.txt
+++ b/stdlib/private/StdlibUnittest/CMakeLists.txt
@@ -44,6 +44,7 @@ add_swift_library(swiftStdlibUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STD
   SWIFT_MODULE_DEPENDS_LINUX Glibc
   SWIFT_MODULE_DEPENDS_FREEBSD Glibc
   SWIFT_MODULE_DEPENDS_CYGWIN Glibc
+  SWIFT_MODULE_DEPENDS_HAIKU Glibc
   SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags}
   TARGET_SDKS ALL_POSIX_PLATFORMS
   INSTALL_IN_COMPONENT stdlib-experimental)
diff --git a/stdlib/private/StdlibUnittest/RaceTest.swift b/stdlib/private/StdlibUnittest/RaceTest.swift
index 08d1938402..e0727d2039 100644
--- a/stdlib/private/StdlibUnittest/RaceTest.swift
+++ b/stdlib/private/StdlibUnittest/RaceTest.swift
@@ -41,7 +41,7 @@ import SwiftPrivateLibcExtras
 import SwiftPrivatePthreadExtras
 #if os(OSX) || os(iOS)
 import Darwin
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 import Glibc
 #endif
 
diff --git a/stdlib/private/StdlibUnittest/StdlibCoreExtras.swift b/stdlib/private/StdlibUnittest/StdlibCoreExtras.swift
index 8b790fd160..8ea80bf340 100644
--- a/stdlib/private/StdlibUnittest/StdlibCoreExtras.swift
+++ b/stdlib/private/StdlibUnittest/StdlibCoreExtras.swift
@@ -14,7 +14,7 @@ import SwiftPrivate
 import SwiftPrivateLibcExtras
 #if os(OSX) || os(iOS)
 import Darwin
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 import Glibc
 #endif
 
diff --git a/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb b/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb
index e069b285fe..3e8e7f2459 100644
--- a/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb
+++ b/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb
@@ -20,7 +20,7 @@ import SwiftPrivateLibcExtras
 
 #if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
 import Darwin
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 import Glibc
 #endif
 
@@ -770,9 +770,17 @@ struct _ParentProcess {
         errorfds.set(_childStderr.fd)
       }
       var ret: CInt
+      #if os(Haiku)
+       // FIXME: EINTR is defined in <Errors.h>, but the build system can't find it yet, this will be fixed soon.
+       repeat {
+        ret = _stdlib_select(&readfds, &writefds, &errorfds, nil)
+      } while ret == -1  &&  errno == 10
+      #else
       repeat {
         ret = _stdlib_select(&readfds, &writefds, &errorfds, nil)
       } while ret == -1  &&  errno == EINTR
+      #endif
+
       if ret <= 0 {
         fatalError("select() returned an error")
       }
@@ -1464,6 +1472,7 @@ public enum OSVersion : CustomStringConvertible {
   case ps4
   case windowsCygnus
   case windows
+  case haiku
 
   public var description: String {
     switch self {
@@ -1493,6 +1502,8 @@ public enum OSVersion : CustomStringConvertible {
       return "Cygwin"
     case .windows:
       return "Windows"
+    case .haiku:
+      return "Haiku"
     }
   }
 }
@@ -1535,6 +1546,8 @@ func _getOSVersion() -> OSVersion {
   return .windowsCygnus
 #elseif os(Windows)
   return .windows
+#elseif os(Haiku)
+  return .haiku
 #else
   let productVersion = _stdlib_getSystemVersionPlistProperty("ProductVersion")!
   let (major, minor, bugFix) = _parseDottedVersionTriple(productVersion)
@@ -1616,6 +1629,8 @@ public enum TestRunPredicate : CustomStringConvertible {
   case windowsAny(reason: String)
 
   case windowsCygnusAny(reason: String)
+  
+  case haikuAny(reason: String)
 
   case objCRuntime(/*reason:*/ String)
   case nativeRuntime(/*reason:*/ String)
@@ -1708,6 +1723,9 @@ public enum TestRunPredicate : CustomStringConvertible {
 
     case .windowsCygnusAny(reason: let reason):
       return "windowsCygnusAny(*, reason: \(reason))"
+      
+    case .haikuAny(reason: let reason):
+      return "haikuAny(*, reason: \(reason))"
 
     case .objCRuntime(let reason):
       return "Objective-C runtime, reason: \(reason))"
@@ -1991,6 +2009,14 @@ public enum TestRunPredicate : CustomStringConvertible {
       default:
         return false
       }
+  
+    case .haikuAny:
+      switch _getRunningOSVersion() {
+      case .haiku:
+        return true
+      default:
+        return false
+      }
 
     case .objCRuntime:
 #if _runtime(_ObjC)
diff --git a/stdlib/private/SwiftPrivateLibcExtras/CMakeLists.txt b/stdlib/private/SwiftPrivateLibcExtras/CMakeLists.txt
index 5381c5aa80..d25b1d75a9 100644
--- a/stdlib/private/SwiftPrivateLibcExtras/CMakeLists.txt
+++ b/stdlib/private/SwiftPrivateLibcExtras/CMakeLists.txt
@@ -14,4 +14,5 @@ add_swift_library(swiftSwiftPrivateLibcExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES
   SWIFT_MODULE_DEPENDS_LINUX Glibc
   SWIFT_MODULE_DEPENDS_FREEBSD Glibc
   SWIFT_MODULE_DEPENDS_CYGWIN Glibc
+  SWIFT_MODULE_DEPENDS_HAIKU Glibc
   INSTALL_IN_COMPONENT stdlib-experimental)
diff --git a/stdlib/private/SwiftPrivateLibcExtras/Subprocess.c b/stdlib/private/SwiftPrivateLibcExtras/Subprocess.c
index b9290110a4..2f75948fbe 100644
--- a/stdlib/private/SwiftPrivateLibcExtras/Subprocess.c
+++ b/stdlib/private/SwiftPrivateLibcExtras/Subprocess.c
@@ -11,7 +11,7 @@
 //===----------------------------------------------------------------------===//
 
 // posix_spawn is not available on Android or Windows (MSVC).
-#if !defined(__ANDROID__) && (!defined(_WIN32) || defined(__CYGWIN__))
+#if !defined(__ANDROID__) && !defined(__HAIKU__) && (!defined(_WIN32) || defined(__CYGWIN__))
 
 #include "swift/Runtime/Config.h"
 
@@ -65,5 +65,5 @@ char ***swift_SwiftPrivateLibcExtras_NSGetEnviron(void) {
   return _NSGetEnviron();
 }
 #endif // defined(__APPLE__)
-#endif // !defined(__ANDROID__) && (!defined(_WIN32) || defined(__CGYWIN__))
+#endif // !defined(__ANDROID__) && !defined(__HAIKU__) && (!defined(_WIN32) || defined(__CGYWIN__))
 
diff --git a/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift b/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift
index e4350d92d2..dc2bdbe783 100644
--- a/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift
+++ b/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift
@@ -13,7 +13,7 @@
 import SwiftPrivate
 #if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
 import Darwin
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 import Glibc
 #endif
 
@@ -21,7 +21,8 @@ import Glibc
 #if !os(Windows)
 // posix_spawn is not available on Windows.
 // posix_spawn is not available on Android.
-#if !os(Android)
+// posix_spawn is not available on Haiku.
+#if !os(Android) && !os(Haiku)
 // swift_posix_spawn isn't available in the public watchOS SDK, we sneak by the
 // unavailable attribute declaration here of the APIs that we need.
 
@@ -83,7 +84,7 @@ public func spawnChild(_ args: [String])
   let childStdin = posixPipe()
   let childStderr = posixPipe()
 
-#if os(Android)
+#if os(Android) || os(Haiku)
   // posix_spawn isn't available on Android. Instead, we fork and exec.
   // To correctly communicate the exit status of the child process to this
   // (parent) process, we'll use this pipe.
@@ -222,7 +223,7 @@ public func spawnChild(_ args: [String])
   return (pid, childStdin.writeFD, childStdout.readFD, childStderr.readFD)
 }
 
-#if !os(Android)
+#if !os(Android) && !os(Haiku)
 #if os(Linux)
 internal func _make_posix_spawn_file_actions_t()
   -> swift_posix_spawn_file_actions_t {
@@ -275,6 +276,14 @@ public func posixWaitpid(_ pid: pid_t) -> ProcessTerminationStatus {
       }
     }
   }
+#elseif os(Haiku)
+// FIXME: EINTR is defined in Haiku but building it
+// with swift fails, this will be fixed soon.
+ while waitpid(pid, &status, 0) < 0 {
+    if errno != 10 {
+      preconditionFailure("waitpid() failed")
+    }
+  }
 #else
   while waitpid(pid, &status, 0) < 0 {
     if errno != EINTR {
@@ -307,6 +316,8 @@ internal func _getEnviron() -> UnsafeMutablePointer<UnsafeMutablePointer<CChar>?
   return environ
 #elseif os(Cygwin)
   return environ
+#elseif os(Haiku)
+  return environ
 #else
   return __environ
 #endif
diff --git a/stdlib/private/SwiftPrivateLibcExtras/SwiftPrivateLibcExtras.swift b/stdlib/private/SwiftPrivateLibcExtras/SwiftPrivateLibcExtras.swift
index 8d4412fb5c..e3ab6dee3b 100644
--- a/stdlib/private/SwiftPrivateLibcExtras/SwiftPrivateLibcExtras.swift
+++ b/stdlib/private/SwiftPrivateLibcExtras/SwiftPrivateLibcExtras.swift
@@ -13,7 +13,7 @@
 import SwiftPrivate
 #if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
 import Darwin
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 import Glibc
 #elseif os(Windows)
 import ucrt
@@ -21,8 +21,8 @@ import ucrt
 
 #if !os(Windows)
 public func _stdlib_mkstemps(_ template: inout String, _ suffixlen: CInt) -> CInt {
-#if os(Android)
-  preconditionFailure("mkstemps doesn't work on Android")
+#if os(Android) || os(Haiku)
+  preconditionFailure("mkstemps doesn't work on your platform")
 #else
   var utf8CStr = template.utf8CString
   let (fd, fileName) = utf8CStr.withUnsafeMutableBufferPointer {
diff --git a/stdlib/private/SwiftPrivatePthreadExtras/CMakeLists.txt b/stdlib/private/SwiftPrivatePthreadExtras/CMakeLists.txt
index cf867d6028..327ef8a895 100644
--- a/stdlib/private/SwiftPrivatePthreadExtras/CMakeLists.txt
+++ b/stdlib/private/SwiftPrivatePthreadExtras/CMakeLists.txt
@@ -11,6 +11,7 @@ add_swift_library(swiftSwiftPrivatePthreadExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TY
   SWIFT_MODULE_DEPENDS_LINUX Glibc
   SWIFT_MODULE_DEPENDS_FREEBSD Glibc
   SWIFT_MODULE_DEPENDS_CYGWIN Glibc
+  SWIFT_MODULE_DEPENDS_HAIKU Glibc
   SWIFT_COMPILE_FLAGS ${STDLIB_SIL_SERIALIZE_ALL}
   TARGET_SDKS ALL_POSIX_PLATFORMS
   INSTALL_IN_COMPONENT stdlib-experimental)
diff --git a/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift b/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift
index df922f9a88..069d381132 100644
--- a/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift
+++ b/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift
@@ -12,7 +12,7 @@
 
 #if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
 import Darwin
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 import Glibc
 #endif
 
@@ -69,7 +69,11 @@ public func _stdlib_pthread_barrier_init(
 ) -> CInt {
   barrier.pointee = _stdlib_pthread_barrier_t()
   if count == 0 {
+   #if os(Haiku)
+    errno = -4
+   #else
     errno = EINVAL
+   #endif
     return -1
   }
   barrier.pointee.mutex = UnsafeMutablePointer.allocate(capacity: 1)
diff --git a/stdlib/private/SwiftPrivatePthreadExtras/SwiftPrivatePthreadExtras.swift b/stdlib/private/SwiftPrivatePthreadExtras/SwiftPrivatePthreadExtras.swift
index 26809a042e..3a4592813a 100644
--- a/stdlib/private/SwiftPrivatePthreadExtras/SwiftPrivatePthreadExtras.swift
+++ b/stdlib/private/SwiftPrivatePthreadExtras/SwiftPrivatePthreadExtras.swift
@@ -17,7 +17,7 @@
 
 #if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
 import Darwin
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 import Glibc
 #endif
 
@@ -59,7 +59,7 @@ internal func invokeBlockContext(
   return context.run()
 }
 
-#if os(Cygwin) || os(FreeBSD)
+#if os(Cygwin) || os(FreeBSD) || os(Haiku)
 public typealias _stdlib_pthread_attr_t = UnsafePointer<pthread_attr_t?>
 #else
 public typealias _stdlib_pthread_attr_t = UnsafePointer<pthread_attr_t>
diff --git a/stdlib/public/Platform/CMakeLists.txt b/stdlib/public/Platform/CMakeLists.txt
index 73ba635352..7e0ffada3d 100644
--- a/stdlib/public/Platform/CMakeLists.txt
+++ b/stdlib/public/Platform/CMakeLists.txt
@@ -23,7 +23,7 @@ add_swift_library(swiftGlibc ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY
 
     SWIFT_COMPILE_FLAGS "${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}"
     LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
-    TARGET_SDKS ANDROID CYGWIN FREEBSD LINUX
+    TARGET_SDKS ANDROID CYGWIN FREEBSD LINUX HAIKU
     DEPENDS glibc_modulemap)
 
 add_swift_library(swiftMSVCRT ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY
@@ -39,7 +39,8 @@ foreach(sdk ${SWIFT_SDKS})
   if(NOT "${sdk}" STREQUAL "LINUX" AND
      NOT "${sdk}" STREQUAL "FREEBSD" AND
      NOT "${sdk}" STREQUAL "ANDROID" AND
-     NOT "${sdk}" STREQUAL "CYGWIN")
+     NOT "${sdk}" STREQUAL "CYGWIN" AND
+     NOT "${sdk}" STREQUAL "HAIKU")
     continue()
   endif()
 
@@ -47,18 +48,28 @@ foreach(sdk ${SWIFT_SDKS})
     set(arch_subdir "${SWIFT_SDK_${sdk}_LIB_SUBDIR}/${arch}")
     set(module_dir "${SWIFTLIB_DIR}/${arch_subdir}")
 
-    # Determine the location of glibc headers based on the target.
-    set(GLIBC_SYSROOT_RELATIVE_INCLUDE_PATH "/usr/include")
-    set(GLIBC_SYSROOT_RELATIVE_ARCH_INCLUDE_PATH ${GLIBC_SYSROOT_RELATIVE_INCLUDE_PATH})
+    if("${sdk}" STREQUAL "HAIKU")
+      # Haiku doesn't have /usr/include, instead the headers are located
+      # at /system/develop/headers.
+      set(GLIBC_INCLUDE_PATH "/system/develop/headers/posix")
+      set(GLIBC_ARCH_INCLUDE_PATH "/system/develop/headers/posix")
+      set(GLIBC_SYSROOT_RELATIVE_INCLUDE_PATH "/system/develop/headers/")
+    else()
+	 # Determine the location of glibc headers based on the target.
+	 set(GLIBC_SYSROOT_RELATIVE_INCLUDE_PATH "/usr/include")
+	 set(GLIBC_SYSROOT_RELATIVE_ARCH_INCLUDE_PATH ${GLIBC_SYSROOT_RELATIVE_INCLUDE_PATH})
+    endif()
 
     # Some SDKs place their headers in architecture-specific subfolders.
     if((${sdk} STREQUAL "LINUX" OR ${sdk} STREQUAL "FREEBSD") AND CMAKE_LIBRARY_ARCHITECTURE)
       set(GLIBC_SYSROOT_RELATIVE_ARCH_INCLUDE_PATH "${GLIBC_SYSROOT_RELATIVE_ARCH_INCLUDE_PATH}/${CMAKE_LIBRARY_ARCHITECTURE}")
     endif()
 
-    set(GLIBC_INCLUDE_PATH "${SWIFT_SDK_${sdk}_PATH}/${GLIBC_SYSROOT_RELATIVE_INCLUDE_PATH}")
-    set(GLIBC_ARCH_INCLUDE_PATH "${SWIFT_SDK_${sdk}_PATH}/${GLIBC_SYSROOT_RELATIVE_ARCH_INCLUDE_PATH}")
-
+    if(NOT "${sdk}" STREQUAL "HAIKU")
+      set(GLIBC_INCLUDE_PATH "${SWIFT_SDK_${sdk}_PATH}/${GLIBC_SYSROOT_RELATIVE_INCLUDE_PATH}")
+      set(GLIBC_ARCH_INCLUDE_PATH "${SWIFT_SDK_${sdk}_PATH}/${GLIBC_SYSROOT_RELATIVE_ARCH_INCLUDE_PATH}")
+    endif()
+    
     set(glibc_modulemap_source "glibc.modulemap.gyb")
     set(glibc_modulemap_out "${module_dir}/glibc.modulemap")
 
diff --git a/stdlib/public/Platform/POSIXError.swift b/stdlib/public/Platform/POSIXError.swift
index e98b1e4a71..b3e768a374 100644
--- a/stdlib/public/Platform/POSIXError.swift
+++ b/stdlib/public/Platform/POSIXError.swift
@@ -264,7 +264,7 @@
   // KERNEL.
 }
 
-#elseif os(Linux) || os(Android)
+#elseif os(Linux) || os(Android) || os(Haiku)
 
 /// Enumeration describing POSIX error codes.
 public enum POSIXErrorCode : Int32 {
diff --git a/stdlib/public/Platform/Platform.swift b/stdlib/public/Platform/Platform.swift
index fd7c6605e2..fe5f2198e8 100644
--- a/stdlib/public/Platform/Platform.swift
+++ b/stdlib/public/Platform/Platform.swift
@@ -367,7 +367,7 @@ public var SIG_DFL: sig_t? { return nil }
 public var SIG_IGN: sig_t { return unsafeBitCast(1, to: sig_t.self) }
 public var SIG_ERR: sig_t { return unsafeBitCast(-1, to: sig_t.self) }
 public var SIG_HOLD: sig_t { return unsafeBitCast(5, to: sig_t.self) }
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Haiku)
 public typealias sighandler_t = __sighandler_t
 
 public var SIG_DFL: sighandler_t? { return nil }
@@ -415,7 +415,7 @@ public var SEM_FAILED: UnsafeMutablePointer<sem_t>? {
 #if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
   // The value is ABI.  Value verified to be correct for OS X, iOS, watchOS, tvOS.
   return UnsafeMutablePointer<sem_t>(bitPattern: -1)
-#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#elseif os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
   // The value is ABI.  Value verified to be correct on Glibc.
   return UnsafeMutablePointer<sem_t>(bitPattern: 0)
 #else
diff --git a/stdlib/public/Platform/TiocConstants.swift b/stdlib/public/Platform/TiocConstants.swift
index 17ef31a89b..0590e3992c 100644
--- a/stdlib/public/Platform/TiocConstants.swift
+++ b/stdlib/public/Platform/TiocConstants.swift
@@ -13,7 +13,7 @@
 // Tty ioctl request constants, needed only on Darwin and FreeBSD.
 
 // Constants available on all platforms, also available on Linux.
-#if os(OSX) || os(iOS) || os(tvOS) || os(watchOS) || os(FreeBSD)
+#if os(OSX) || os(iOS) || os(tvOS) || os(watchOS) || os(FreeBSD) || os(Haiku)
 
 /// Set exclusive use of tty.
 public var TIOCEXCL: UInt { return 0x2000740d }
diff --git a/stdlib/public/Platform/glibc.modulemap.gyb b/stdlib/public/Platform/glibc.modulemap.gyb
index 59c6bfd50c..ef597c40d8 100644
--- a/stdlib/public/Platform/glibc.modulemap.gyb
+++ b/stdlib/public/Platform/glibc.modulemap.gyb
@@ -26,13 +26,19 @@ module SwiftGlibc [system] {
   link "util"
 % end
 
-% if CMAKE_SDK != "FREEBSD":
+% if CMAKE_SDK != "FREEBSD" and CMAKE_SDK != "HAIKU":
   link "dl"
 % end
 
+% if CMAKE_SDK == "HAIKU":
+  link "network"
+  link "bsd"
+  link "execinfo"
+% end
+
   // C standard library
   module C {
-% if CMAKE_SDK in ["LINUX", "FREEBSD", "CYGWIN"]:
+% if CMAKE_SDK in ["LINUX", "FREEBSD", "CYGWIN", "HAIKU"]:
     module complex {
       header "${GLIBC_INCLUDE_PATH}/complex.h"
       export *
@@ -58,6 +64,12 @@ module SwiftGlibc [system] {
       export *
     }
 % end
+% if CMAKE_SDK == "HAIKU":
+    module pty {
+      header "${GLIBC_INCLUDE_PATH}/../bsd/pty.h"
+      export *
+    }
+% end
 
 % if CMAKE_SDK in ["LINUX", "ANDROID", "CYGWIN"]:
     module features {
@@ -249,6 +261,48 @@ module SwiftGlibc [system] {
     }
 % end
 
+% if CMAKE_SDK == "HAIKU":
+    module ftw {
+      header "${GLIBC_INCLUDE_PATH}/ftw.h"
+      export *
+    }
+    module glob {
+      header "${GLIBC_INCLUDE_PATH}/glob.h"
+      export *
+    }
+    module iconv {
+      header "${GLIBC_INCLUDE_PATH}/../iconv.h"
+      export *
+    }
+    module langinfo {
+      header "${GLIBC_INCLUDE_PATH}/langinfo.h"
+      export *
+    }
+    module monetary {
+      header "${GLIBC_INCLUDE_PATH}/monetary.h"
+      export *
+    }
+    module netdb {
+      header "${GLIBC_INCLUDE_PATH}/netdb.h"
+      export *
+    }
+    module ifaddrs {
+      header "${GLIBC_INCLUDE_PATH}/../bsd/ifaddrs.h"
+      export *
+    }
+    module search {
+      header "${GLIBC_INCLUDE_PATH}/search.h"
+      export *
+    }
+    module syslog {
+      header "${GLIBC_INCLUDE_PATH}/syslog.h"
+      export *
+    }
+    module tar {
+      header "${GLIBC_INCLUDE_PATH}/tar.h"
+      export *
+    }
+% end
     module arpa {
       module inet {
         header "${GLIBC_INCLUDE_PATH}/arpa/inet.h"
@@ -334,7 +388,7 @@ module SwiftGlibc [system] {
     module sys {
       export *
 
-% if CMAKE_SDK in ["LINUX", "FREEBSD", "CYGWIN"]:
+% if CMAKE_SDK in ["LINUX", "FREEBSD", "CYGWIN", "HAIKU"]:
       module file {
         header "${GLIBC_ARCH_INCLUDE_PATH}/sys/file.h"
         export *
@@ -343,10 +397,12 @@ module SwiftGlibc [system] {
         header "${GLIBC_ARCH_INCLUDE_PATH}/sys/sem.h"
         export *
       }
+% if CMAKE_SDK != "HAIKU":
       module shm {
         header "${GLIBC_ARCH_INCLUDE_PATH}/sys/shm.h"
         export *
       }
+% end
       module statvfs {
         header "${GLIBC_ARCH_INCLUDE_PATH}/sys/statvfs.h"
         export *
@@ -373,7 +429,7 @@ module SwiftGlibc [system] {
         header "${GLIBC_ARCH_INCLUDE_PATH}/sys/select.h"
         export *
       }
-% if CMAKE_SDK != "FREEBSD":
+% if CMAKE_SDK != "FREEBSD" and CMAKE_SDK != "HAIKU":
       module sendfile {
         header "${GLIBC_ARCH_INCLUDE_PATH}/sys/sendfile.h"
         export *
diff --git a/stdlib/public/Platform/tgmath.swift.gyb b/stdlib/public/Platform/tgmath.swift.gyb
index 34bd5443fe..1cb5a50883 100644
--- a/stdlib/public/Platform/tgmath.swift.gyb
+++ b/stdlib/public/Platform/tgmath.swift.gyb
@@ -214,7 +214,7 @@ public func ${bfunc}(_ lhs: ${T}, _ rhs: ${T}) -> ${T} {
 @available(*, deprecated, message: "use the floatingPointClass property.")
 public func fpclassify(_ value: ${T}) -> Int {
 %if T == 'Double':
-#if os(Linux)
+#if os(Linux) || os(Haiku)
   return Int(__fpclassify(CDouble(value)))
 #elseif os(Windows) 
   return Int(_dclass(CDouble(value)))
@@ -298,7 +298,7 @@ public func scalbn(_ x: ${T}, _ n: Int) -> ${T} {
 
 % # This is AllFloatTypes not OverlayFloatTypes because of the tuple return.
 % for T, CT, f in AllFloatTypes():
-#if os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin)
+#if os(Linux) || os(FreeBSD) || os(PS4) || os(Android) || os(Cygwin) || os(Haiku)
 @_transparent
 public func lgamma(_ x: ${T}) -> (${T}, Int) {
   var sign = Int32(0)
diff --git a/stdlib/public/SwiftShims/LibcShims.h b/stdlib/public/SwiftShims/LibcShims.h
index d1cba7fe40..d3efdf185b 100644
--- a/stdlib/public/SwiftShims/LibcShims.h
+++ b/stdlib/public/SwiftShims/LibcShims.h
@@ -119,6 +119,8 @@ typedef int __swift_pthread_key_t;
 typedef unsigned int __swift_pthread_key_t;
 #elif defined(__FreeBSD__)
 typedef int __swift_pthread_key_t;
+#elif defined(__HAIKU__)
+typedef int __swift_pthread_key_t;
 #else
 typedef unsigned long __swift_pthread_key_t;
 #endif
diff --git a/stdlib/public/runtime/Errors.cpp b/stdlib/public/runtime/Errors.cpp
index c6cf2ce0ce..964894cfff 100644
--- a/stdlib/public/runtime/Errors.cpp
+++ b/stdlib/public/runtime/Errors.cpp
@@ -14,7 +14,7 @@
 //
 //===----------------------------------------------------------------------===//
 
-#if defined(__CYGWIN__) || defined(__ANDROID__) || defined(_WIN32)
+#if defined(__CYGWIN__) || defined(__ANDROID__) || defined(_WIN32) || defined(__HAIKU__)
 #  define SWIFT_SUPPORTS_BACKTRACE_REPORTING 0
 #else
 #  define SWIFT_SUPPORTS_BACKTRACE_REPORTING 1
diff --git a/stdlib/public/runtime/ImageInspectionELF.cpp b/stdlib/public/runtime/ImageInspectionELF.cpp
index 54fb123071..d3d21d3afa 100644
--- a/stdlib/public/runtime/ImageInspectionELF.cpp
+++ b/stdlib/public/runtime/ImageInspectionELF.cpp
@@ -24,8 +24,21 @@
 #include "swift/Runtime/Debug.h"
 #include <dlfcn.h>
 #include <elf.h>
-#include <link.h>
 #include <string.h>
+#include <unistd.h>
+
+#if !defined(__HAIKU__)
+#include <link.h>
+#else
+#include <OS.h>
+#include <image.h>
+struct dl_phdr_info {
+	void *dlpi_addr;
+	const char *dlpi_name;
+};
+#define dl_iterate_phdr _dl_iterate_phdr
+#define RTLD_NOLOAD RTLD_LOCAL
+#endif
 
 using namespace swift;
 
@@ -48,6 +61,34 @@ struct InspectArgs {
   bool didInitializeLookup;
 };
 
+static int _dl_iterate_phdr(int (*callback)(struct dl_phdr_info *info, size_t size, void *data), void *data);
+#if defined(__HAIKU__)
+static int _dl_iterate_phdr(int (*callback)(struct dl_phdr_info *info, size_t size, void *data), void *data) {
+	pid_t team_id = getpid();
+	
+	image_info i_info;
+	int32 image_cookie = 0;
+
+	int ret = 0;
+	
+	while(get_next_image_info(team_id, &image_cookie, &i_info) == B_OK)
+	{
+	  if(i_info.type == B_LIBRARY_IMAGE)
+	  {
+	  // Get the symbol for this particular image //	
+	   dl_phdr_info hdr;
+	   hdr.dlpi_name = i_info.name;
+	   hdr.dlpi_addr = i_info.text;
+	   ret = callback(&hdr, sizeof(hdr), data);
+	   if (ret != 0)
+	   { break; }
+	  }
+	}
+
+	return ret;
+}
+#endif
+
 static InspectArgs ProtocolConformanceArgs = {
   ProtocolConformancesSymbol,
   addImageProtocolConformanceBlockCallback,
@@ -114,9 +155,15 @@ static void addBlockInImage(const InspectArgs *inspectArgs, const void *addr) {
   const char *fname = nullptr;
   if (addr) {
     Dl_info info;
+    #if defined(__HAIKU__)
+    if (dladdr((void*)addr, &info) == 0 || info.dli_fname == nullptr) {
+      return;
+    }
+    #else
     if (dladdr(addr, &info) == 0 || info.dli_fname == nullptr) {
       return;
     }
+    #endif
     fname = info.dli_fname;
   }
   SectionInfo block = getSectionInfo(fname, inspectArgs->symbolName);
@@ -159,7 +206,7 @@ void swift_addNewDSOImage(const void *addr) {
 
 int swift::lookupSymbol(const void *address, SymbolInfo *info) {
   Dl_info dlinfo;
-  if (dladdr(address, &dlinfo) == 0) {
+  if (dladdr((void*)address, &dlinfo) == 0) {
     return 0;
   }
 
diff --git a/stdlib/public/runtime/MetadataCache.h b/stdlib/public/runtime/MetadataCache.h
index cfb8a915b2..7682b7110e 100644
--- a/stdlib/public/runtime/MetadataCache.h
+++ b/stdlib/public/runtime/MetadataCache.h
@@ -302,7 +302,7 @@ public:
     // Ensure the existence of a map entry.
     auto insertResult = Map.getOrInsert(key);
     Entry *entry = insertResult.first;
-
+/*
     // If we didn't insert the entry, then we just need to get the
     // initialized value from the entry.
     if (!insertResult.second) {
@@ -337,7 +337,7 @@ public:
 
       return value;
     }
-
+*/
     // Otherwise, we created the entry and are responsible for
     // creating the metadata.
     auto value = builder();
@@ -348,10 +348,11 @@ public:
 #endif
 
     // Acquire the lock, set the value, and notify any waiters.
+    /*
     auto concurrency = Concurrency.get();
     concurrency->Lock.withLockThenNotifyAll(
         concurrency->Queue, [&entry, &value] { entry->setValue(value); });
-
+   */
     return value;
   }
 };
diff --git a/stdlib/public/stubs/LibcShims.cpp b/stdlib/public/stubs/LibcShims.cpp
index a483d696a8..872523f503 100644
--- a/stdlib/public/stubs/LibcShims.cpp
+++ b/stdlib/public/stubs/LibcShims.cpp
@@ -133,7 +133,10 @@ SWIFT_RUNTIME_STDLIB_INTERFACE
 size_t swift::_swift_stdlib_malloc_size(const void *ptr) {
   return malloc_size(ptr);
 }
-#elif defined(__GNU_LIBRARY__) || defined(__CYGWIN__) || defined(__ANDROID__)
+#elif defined(__GNU_LIBRARY__) || defined(__CYGWIN__) || defined(__ANDROID__) || defined(__HAIKU__)
+#if defined(__HAIKU__)
+#define _GNU_SOURCE
+#endif
 #include <malloc.h>
 SWIFT_RUNTIME_STDLIB_INTERFACE
 size_t swift::_swift_stdlib_malloc_size(const void *ptr) {
diff --git a/stdlib/public/stubs/Stubs.cpp b/stdlib/public/stubs/Stubs.cpp
index e3f1995039..e6820097af 100644
--- a/stdlib/public/stubs/Stubs.cpp
+++ b/stdlib/public/stubs/Stubs.cpp
@@ -26,8 +26,12 @@
 #define NOMINMAX
 #include <windows.h>
 #else
-#include <sys/resource.h>
+#if !defined(__HAIKU__)
 #include <sys/errno.h>
+#else
+#include <errno.h>
+#endif
+#include <sys/resource.h>
 #include <unistd.h>
 #endif
 #include <climits>
@@ -36,7 +40,7 @@
 #include <cstdio>
 #include <cstdlib>
 #include <cstring>
-#if defined(__CYGWIN__) || defined(_WIN32)
+#if defined(__CYGWIN__) || defined(_WIN32) || defined(__HAIKU__)
 #include <sstream>
 #include <cmath>
 #define fmodl(lhs, rhs) std::fmod(lhs, rhs)
@@ -145,7 +149,7 @@ static inline locale_t getCLocale() {
   // as C locale.
   return nullptr;
 }
-#elif defined(__CYGWIN__) || defined(_WIN32)
+#elif defined(__CYGWIN__) || defined(_WIN32) || defined(__HAIKU__)
 // In Cygwin, getCLocale() is not used.
 #else
 static locale_t makeCLocale() {
@@ -163,7 +167,7 @@ static locale_t getCLocale() {
 
 #if defined(__APPLE__)
 #define swift_snprintf_l snprintf_l
-#elif defined(__CYGWIN__) || defined(_WIN32)
+#elif defined(__CYGWIN__) || defined(_WIN32) || defined(__HAIKU__)
 // In Cygwin, swift_snprintf_l() is not used.
 #else
 static int swift_snprintf_l(char *Str, size_t StrSize, locale_t Locale,
@@ -196,7 +200,7 @@ static uint64_t swift_floatingPointToString(char *Buffer, size_t BufferLength,
     Precision = std::numeric_limits<T>::max_digits10;
   }
 
-#if defined(__CYGWIN__) || defined(_WIN32)
+#if defined(__CYGWIN__) || defined(_WIN32) || defined(__HAIKU__)
   // Cygwin does not support uselocale(), but we can use the locale feature 
   // in stringstream object.
   std::ostringstream ValueStream;
@@ -458,7 +462,7 @@ static bool swift_stringIsSignalingNaN(const char *nptr) {
   return strcasecmp(nptr, "snan") == 0;
 }
 
-#if defined(__CYGWIN__) || defined(_WIN32)
+#if defined(__CYGWIN__) || defined(_WIN32) || defined(__HAIKU__)
 // Cygwin does not support uselocale(), but we can use the locale feature 
 // in stringstream object.
 template <typename T>
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 3eb942861d..004bae9117 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -63,7 +63,8 @@ function(get_test_dependencies SDK result_var_name)
      ("${SDK}" STREQUAL "CYGWIN") OR
      ("${SDK}" STREQUAL "FREEBSD") OR
      ("${SDK}" STREQUAL "ANDROID") OR
-     ("${SDK}" STREQUAL "WINDOWS"))
+     ("${SDK}" STREQUAL "WINDOWS") OR
+     ("${SDK}" STREQUAL "HAIKU"))
     # No extra dependencies.
   else()
     message(FATAL_ERROR "Unknown SDK: ${SDK}")
diff --git a/utils/build-script-impl b/utils/build-script-impl
index cf51c629d1..87a377a231 100755
--- a/utils/build-script-impl
+++ b/utils/build-script-impl
@@ -109,6 +109,7 @@ KNOWN_SETTINGS=(
     skip-build-linux            ""               "set to skip building Swift stdlibs for Linux"
     skip-build-freebsd          ""               "set to skip building Swift stdlibs for FreeBSD"
     skip-build-cygwin           ""               "set to skip building Swift stdlibs for Cygwin"
+    skip-build-haiku            ""               "set to skip building Swift stdlibs for Haiku"
     skip-build-osx              ""               "set to skip building Swift stdlibs for OS X"
     skip-build-ios-device       ""               "set to skip building Swift stdlibs for iOS devices (i.e. build simulators only)"
     skip-build-ios-simulator    ""               "set to skip building Swift stdlibs for iOS simulators (i.e. build devices only)"
@@ -141,6 +142,7 @@ KNOWN_SETTINGS=(
     skip-test-linux             ""               "set to skip testing Swift stdlibs for Linux"
     skip-test-freebsd           ""               "set to skip testing Swift stdlibs for FreeBSD"
     skip-test-cygwin            ""               "set to skip testing Swift stdlibs for Cygwin"
+    skip-test-haiku            ""                "set to skip testing Swift stdlibs for Haiku"
     skip-test-osx               ""               "set to skip testing Swift stdlibs for OS X"
     skip-test-ios-32bit-simulator     ""         "set to skip testing Swift stdlibs for iOS 32bit simulators"
     skip-test-ios-simulator     ""               "set to skip testing Swift stdlibs for iOS simulators (i.e. test devices only)"
@@ -425,6 +427,11 @@ function set_build_options_for_host() {
             SWIFT_HOST_VARIANT_SDK="CYGWIN"
             SWIFT_HOST_VARIANT_ARCH="x86_64"
             ;;
+        haiku-x86_64)
+	        SWIFT_HOST_VARIANT="haiku"
+            SWIFT_HOST_VARIANT_SDK="HAIKU"
+            SWIFT_HOST_VARIANT_ARCH="x86_64"
+            ;;
         linux-*)
             SWIFT_HOST_VARIANT="linux"
             SWIFT_HOST_VARIANT_SDK="LINUX"
@@ -1333,6 +1340,11 @@ function calculate_targets_for_host() {
                 build_for_this_target=$(not ${SKIP_BUILD_CYGWIN})
                 test_this_target=$(not ${SKIP_TEST_CYGWIN})
                 ;;
+            haiku-*)
+                swift_sdk="HAIKU"
+                build_for_this_target=$(not ${SKIP_BUILD_HAIKU})
+                test_this_target=$(not ${SKIP_TEST_HAIKU})
+                ;;
             macosx-*)
                 swift_sdk="OSX"
                 build_for_this_target=$(not ${SKIP_BUILD_OSX})
@@ -2332,6 +2344,24 @@ for host in "${ALL_HOSTS[@]}"; do
                             -DLLDB_ALLOW_STATIC_BINDINGS=1
                         )
                         ;;
+                     haiku-*)
+                        cmake_options=(
+                            "${cmake_options[@]}"
+                            -DCMAKE_BUILD_TYPE:STRING="${LLDB_BUILD_TYPE}"
+                            -DLLDB_SWIFTC:PATH="$(build_directory ${LOCAL_HOST} swift)/bin/swiftc"
+                            -DCMAKE_INSTALL_PREFIX:PATH="$(get_host_install_prefix ${host})"
+                            -DLLDB_PATH_TO_LLVM_SOURCE:PATH="${LLVM_SOURCE_DIR}"
+                            -DLLDB_PATH_TO_CLANG_SOURCE:PATH="${CLANG_SOURCE_DIR}"
+                            -DLLDB_PATH_TO_SWIFT_SOURCE:PATH="${SWIFT_SOURCE_DIR}"
+                            -DLLDB_PATH_TO_LLVM_BUILD:PATH="${llvm_build_dir}"
+                            -DLLDB_PATH_TO_CLANG_BUILD:PATH="${llvm_build_dir}"
+                            -DLLDB_PATH_TO_SWIFT_BUILD:PATH="${swift_build_dir}"
+                            -DLLDB_PATH_TO_CMARK_BUILD:PATH="${cmark_build_dir}"
+                            -DLLDB_IS_BUILDBOT_BUILD="${LLDB_IS_BUILDBOT_BUILD}"
+                            -DLLDB_BUILD_DATE:STRING="\"${LLDB_BUILD_DATE}\""
+                            -DLLDB_ALLOW_STATIC_BINDINGS=1
+                        )
+                        ;;
                     macosx-*)
                         # Set up flags to pass to xcodebuild
                         set_lldb_xcodebuild_options
@@ -2594,6 +2624,8 @@ for host in "${ALL_HOSTS[@]}"; do
             if [[ "$(uname -s)" == "Darwin" ]] ; then
               HOST_CXX_DIR=$(dirname ${HOST_CXX})
               HOST_CXX_HEADERS_DIR="$HOST_CXX_DIR/../../usr/include/c++"
+            elif [[ "$(uname -s)" == "Haiku" ]] ; then
+              HOST_CXX_HEADERS_DIR="/boot/system/develop/headers/c++"
             else # Linux
               HOST_CXX_HEADERS_DIR="/usr/include/c++"
             fi
@@ -3006,6 +3038,8 @@ for host in "${ALL_HOSTS[@]}"; do
                         ;;
                     cygwin-*)
                         ;;
+                    haiku-*)
+                        ;;
                     macosx-*)
                         set_lldb_build_mode
                         with_pushd ${LLDB_SOURCE_DIR} \
@@ -3047,6 +3081,9 @@ for host in "${ALL_HOSTS[@]}"; do
                     cygwin-*)
                         LIB_TARGET="windows"
                         ;;
+                    haiku-*)
+                        LIB_TARGET="haiku"
+                        ;;
                     *)
                         echo "error: --install-xctest is not supported on this platform"
                         exit 1
@@ -3189,6 +3226,8 @@ for host in "${ALL_HOSTS[@]}"; do
                         ;;
                     CYGWIN_NT-10.0)
                         ;;
+                    Haiku)
+                        ;;
                     Darwin)
                         pushd "${PLAYGROUNDSUPPORT_SOURCE_DIR}"
                         xcodebuild -target AllProducts -configuration ${PLAYGROUNDSUPPORT_BUILD_TYPE} install SWIFT_EXEC="${SWIFTC_BIN}" DT_TOOLCHAIN_DIR="${TOOLCHAIN_PREFIX}" DSTROOT="$(get_host_install_destdir ${host})"
diff --git a/utils/swift_build_support/swift_build_support/targets.py b/utils/swift_build_support/swift_build_support/targets.py
index ab3e6dccac..f4b5bb0d48 100644
--- a/utils/swift_build_support/swift_build_support/targets.py
+++ b/utils/swift_build_support/swift_build_support/targets.py
@@ -128,6 +128,8 @@ class StdlibDeploymentTarget(object):
 
     Windows = Platform("windows", archs=["x86_64"])
 
+    Haiku = Platform("haiku", archs=["x86_64"])
+
     # The list of known platforms.
     known_platforms = [
         OSX,
@@ -138,7 +140,8 @@ class StdlibDeploymentTarget(object):
         FreeBSD,
         Cygwin,
         Android,
-        Windows]
+        Windows,
+        Haiku]
 
     # Cache of targets by name.
     _targets_by_name = dict((target.name, target)
@@ -188,6 +191,10 @@ class StdlibDeploymentTarget(object):
             if machine == "AMD64":
                 return StdlibDeploymentTarget.Windows.x86_64
 
+        elif system == 'Haiku':
+            if machine == 'x86_64':
+                return StdlibDeploymentTarget.Haiku.x86_64
+
         raise NotImplementedError('System "%s" with architecture "%s" is not '
                                   'supported' % (system, machine))
 
diff --git a/utils/swift_build_support/swift_build_support/toolchain.py b/utils/swift_build_support/swift_build_support/toolchain.py
index 367384d5ac..5b40433a3b 100644
--- a/utils/swift_build_support/swift_build_support/toolchain.py
+++ b/utils/swift_build_support/swift_build_support/toolchain.py
@@ -186,6 +186,9 @@ class Windows(Toolchain):
                 return found
         return None
 
+class Haiku(GenericUnix):
+    def __init__(self):
+	super(Haiku, self)
 
 def host_toolchain(**kwargs):
     sys = platform.system()
@@ -199,6 +202,8 @@ def host_toolchain(**kwargs):
         return Cygwin()
     elif sys == 'Windows':
         return Windows()
+    elif sys == 'Haiku':
+        return Haiku()
     else:
         raise NotImplementedError('The platform "%s" does not have a defined '
                                   'toolchain.' % sys)
-- 
2.11.0

